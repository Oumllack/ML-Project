import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction des Prix des Maisons en Californie",
    page_icon="üè†",
    layout="wide"
)

# Chargement des donn√©es et du mod√®le
@st.cache_data
def load_data():
    X_train = pd.read_csv('data/X_train.csv')
    y_train = pd.read_csv('data/y_train.csv')
    return X_train, y_train

@st.cache_resource
def load_model():
    return joblib.load('models/optimized_lightgbm.joblib')

# Chargement des visualisations
@st.cache_resource
def load_images():
    images = {
        'distribution': Image.open('images/price_distribution.png'),
        'importance': Image.open('images/feature_importance.png'),
        'comparison': Image.open('images/model_comparison.png'),
        'residuals': Image.open('images/residuals.png')
    }
    return images

def main():
    # Chargement des donn√©es n√©cessaires
    X_train, y_train = load_data()
    model = load_model()
    images = load_images()
    
    # Titre et introduction
    st.title("üè† Pr√©diction des Prix des Maisons en Californie")
    st.markdown("""
    Cette application utilise un mod√®le d'apprentissage automatique pour pr√©dire les prix des maisons en Californie.
    Le mod√®le a √©t√© entra√Æn√© sur des donn√©es historiques et optimis√© pour une meilleure pr√©cision.
    """)
    
    # Cr√©ation de deux colonnes pour l'interface
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìä Analyse des Donn√©es")
        
        # Distribution des prix
        st.write("### Distribution des Prix des Maisons")
        st.image(images['distribution'], caption="Distribution des prix des maisons dans le jeu de donn√©es")
        
        # Importance des caract√©ristiques
        st.write("### Importance des Caract√©ristiques")
        st.image(images['importance'], caption="Impact relatif de chaque caract√©ristique sur le prix")
        
        # Comparaison des mod√®les
        st.write("### Performance des Mod√®les")
        st.image(images['comparison'], caption="Comparaison des diff√©rents mod√®les test√©s")
    
    with col2:
        st.subheader("üéØ Pr√©diction de Prix")
        
        # Cr√©ation des sliders pour les caract√©ristiques
        features = {}
        for col in X_train.columns:
            min_val = float(X_train[col].min())
            max_val = float(X_train[col].max())
            mean_val = float(X_train[col].mean())
            features[col] = st.slider(
                f"{col}",
                min_value=min_val,
                max_value=max_val,
                value=mean_val,
                format="%.2f"
            )
        
        # Bouton de pr√©diction
        if st.button("Pr√©dire le Prix"):
            # Pr√©paration des donn√©es pour la pr√©diction
            X_pred = pd.DataFrame([features])
            
            # Pr√©diction
            prediction = model.predict(X_pred)[0]
            
            # Affichage du r√©sultat
            st.success(f"Prix pr√©dit : {prediction:.2f} x 100,000 $")
            st.write(f"(soit {prediction * 100000:.2f} $)")
        
        # Informations sur le mod√®le
        st.write("### üìà Analyse des R√©sidus")
        st.image(images['residuals'], caption="Distribution des erreurs de pr√©diction")

if __name__ == "__main__":
    main() 